[[http://www.hammerspoon.org/][Hammerspoon]] config inspired by [[http://spacemacs.org/][Spacemacs]]

#+BEGIN_SRC bash
git clone https://github.com/agzam/spacehammer ~/.hammerspoon
#+END_SRC

** Rationale
   Keyboard-oriented workflows are often far more efficient and less frustrating than similar mouse-driven techniques. However, the most popular strategy in that space is to use a multitude of keyboard shortcuts. And obviously, that approach is not very scalable. You start adding keyboard shortcuts for various actions, and soon you run out of ideas.

   Ideas of command composability (first explored in ~Vi~ and later expanded in its successor ~Vim~), although do require some initial learning and getting used to, allow you to expand your keyboard-oriented workflow with a minimal effort to memorize keys. There's so much you can do with using ~h/j/k/l~ keys alone.

   However, the "one-dimensional" approach utilized in vanilla Vim, where a single modal (to switch from Normal to Edit to Select mode) is used, also has limitations. But basic ideas of modality can be expanded further. [[http://spacemacs.org/][Spacemacs]] project is an excellent example of where that was done. In Spacemacs - there is a single primary "modifier" key - ~SPACE~. To trigger an action user is required to press a mnemonically recognizable combination of keys (that usually starts with ~space~ key), e.g., ~SPC w m~ is used to maximize current window/buffer.

   This project explores these ideas to allow you to take your keyboard-driven workflow to the next level. Jumping between applications, controlling the size and position of their windows, searching for things, etc. - everything follows simple, mnemonic semantics. It allows you to keep your fingers on the home row. And no need to memorize a myriad of keystrokes. Or to drag your hand to reach for mouse/touchpad/arrow keys - that inevitably slows you down.   to reach for mouse/touchpad/arrow keys - that inevitably slows you down.

*** Fennel
    Spacehammer initially was written in Lua (as the majority of Hammerspoon
    configs), but later was completely re-written in
    [[https://fennel-lang.org/][Fennel]] - tiny Lisp that compiles into Lua.
    There is nothing wrong with Lua, but Lisp has many benefits (sadly often
    overlooked and ignored by majority of programmers today). Switching to
    Fennel allowed us to keep the code more structured and concise.

** Prerequisites
*** Install Hammerspoon
    You can use brew:
    #+begin_src bash
      brew cask install hammerspoon
    #+end_src
*** Install Fennel
    #+begin_src bash
      brew install luarocks

      luarocks install fennel
    #+end_src

** Important note about the Lead key
   Lead key combo is by default set to =Option+SPC=, but it can be re-configured in ~~/.spacehammer/config.fnl~ and to be set for example to =Cmd+SPC=. Be warned though, in OS X =Cmd+SPC= is usually used for Spotlight.

   *In order for it to work - you will have to rebind it in your system*

*** For changing it in the system preferences
    Go to your Preferences/Keyboard, find =Cmd+SPC= keybinding and change it. Unfortunately, simply disabling it sometimes is not enough. You'd have to set it to be something else e.g. =Ctrl+Cmd+Shift+\= or anything else , it doesn't really matter, since you can then un-check the checkbox and disable it.
** Features
**** =Cmd+SPC w= - Window management
     - =hjkl= - moving windows around halves of the screen
     - =Ctrl + hjkl= - for jumping between application windows (handy for side by side windows)
     - =w= - jump to previous window
     - =n/p= - moving current window to prev/next monitor
     - =Alt + hjkl= - moving in increments (works across monitors)
     - =Shift + hjkl= - re-sizing active window
     - =g= - re-sizing with [[http://www.hammerspoon.org/docs/hs.grid.html][hs.grid]]
     - =m= - maximize active window
     - =c= - center active window
     - =u= - undo last window operation (similar to Spacemacs's =SPC w u=)

**** =Cmd+SPC a= - Apps (quick jump)
     - =e= - Emacs
     - =g= - Chrome
     - =i= - iTerm
     - =s= - Slack

     you can add more, also try =Cmd SPC j j=

**** =Cmd+SPC SPC= - open Alfred search bar
     basically pressing =SPC= anytime in any modal takes you to Alfred search popup

**** =Cmd+SPC m= - multimedia controls
     Why just not use media-keys?

       a) because different external keyboards impose their own ways to control media.

       b) I'd like to keep fingers on the home row

    it's configured to work with Google Play Music Desktop App. If you want it to be Spotify or anything else - change the value of  =music-app= in =multimedia.fnl= module

** Other features
**** Alternative App Switcher =Cmd n/p=
**** Simple tab switcher for Chrome and iTerm =Cmd j/k=
     =Cmd l= in Chrome is re-mapped to =Cmd+Shift l=
**** Simple vi-mode
     - =h/j/k/l= - simple left/right/up/down
     - =w/b= - word wise forward back
     - =Shift h/j/k/l= - selecting things

     These can be disabled in certain apps (by default they they are ignored in Emacs)
**** Slack Desktop Client enhancements
      - Switching to Slack via "Apps" modal =CMD+SPC a s= - automatically opens Slack's "Jump to" dialog
      - Scrolling current Slack thread with =C-j/C-k= or =C-e/C-y=
      - Jumping to the end of the thread with =Cmd-g=
      - Adding emoji to the last message - =Cmd-r= (sorry, but default =Cmd-Shift+\= is horribly inconvenient)
      - =C-o/C-i= - jumping back and forth in history
** TODO
   - [ ] Chord function to better support keys like =jk= =fd= or =gg=
   - [ ] =jk= or =fd= to exit modals (like =evil-escape-key-sequence= in Emacs)
   - [ ] Window configuration profiles (similar to Layouts feature in Spacemacs)
   - [ ] Disable non-available keys in a modal. Keys that not listed should be simply ignored see #1
   - [ ] Another thing I want is to be able to toggle ChromeDevtools panel - this is somewhat tricky, see [[https://github.com/Hammerspoon/hammerspoon/issues/1506][this issue]]
   - [ ] Better than default HUD display (something less obtrusive than ~hs.alert~ would be nice

** Customizing
*** Update menus, menu items, bindings, and app specific features
    All menu, app, and key bindings are defined in =~/.spacehammer/config.fnl=.
    That is your custom config and will be safe from any upstream changes to the default config.fnl.
**** Modal Menu Items
     Menu items are listed when you press =cmd+space= and can be nested.
     Items map a key binding to an action, either a function or ="module:function-name"= string.

     Menu items may either define an action or a table list of items.


     For menu items that should be repeated, add =repeatable: true= to the item table.
     The repeatable flag keeps the menu option after the action has been triggered.
     Repeating a menu item is ideal for actions like window layouts where you may wish to move the window from the left third to the right third.

    #+BEGIN_SRC fennel
      (local launch-alfred {:title "Alfred"
                            :key :SPACE
                            :action (fn [] (hs.appplication.launchOrFocus "Alfred"))})
      (local slack-jump {:title "Slack"
                         :key :s
                         :action "slack:quick-switcher"})
      (local window-inc {:title "Window Halves"
                         :mods [:cmd]
                         :key :l
                         :action "windows:resize-inc-right"})
      (local submenu {:title "Submenu"
                      :key :t
                      :items [{:key :m
                               :title "Show a message"
                               :action (fn [] (alert "I'm a submenu action"))}]})
      (local config {:items [launch-alfred
                             slack-jump
                             window-inc
                             submenu]})
     #+END_SRC

***** Lifecycle methods
    Menu items may also define =:enter= and =:exit= functions or action strings. The parent menu item will call the =enter= function when it is opened and =exit= when it is closed. This may be used to manage more complex, or dynamic menus.
**** Global keys
     Global keys are used to set up universal hot-keys for the actions you specify.
     Unlike menu items they do not require a title attribute.
     Additionally you may specify =repeat: true= to repeat the action while the key is held down.

     If you place =:hyper= as a mod, it will use a hyper mode that can be configured by the =hyper= config attribute.
     This can be used to help create bindings that wont interfere with other apps.
     For instance you may make your hyper trigger the virtual =:F18= and use a program like [[https://github.com/tekezo/Karabiner-Elements][karabiner-elements]] to map caps-lock to =F18=.

    #+BEGIN_SRC fennel
      (local config {:hyper {:mods [:cmd :ctrl :alt :shift]}
                     :keys [{:mods [:cmd]
                             :key :space
                             :action "lib.modal:activate-modal"}
                            {:mods [:cmd]
                             :key :h
                             :action "chrome:prev-tab"
                             :repeat true}
                            {:mods [:hyper]
                             :key :f
                             :action (fn [] (alert "Haha you pressed f!"))}]})
    #+END_SRC
**** App specific customizations
     Configure separate menu options and key bindings while specified apps are active.
     Additionally, several lifecycle functions or action strings may be provided for each app.

     - `:activate` When an application receives keyboard focus
     - `:deactivate` When an application loses keyboard focus
     - `:launch` When an application is launched
     - `:close` When an application is terminated

     #+BEGIN_SRC fennel
       (local emacs-config
              {:key "Emacs"
               :activate "vim:disable"
               :deactivate "vim:enable"
               :launch "emacs:maximize"
               :items []
               :keys []})

       (local config {:apps [emacs-config]})
     #+END_SRC
*** Replacing spacehammer behavior
    The =~/.spacehammer= directory is added to the module search paths.
    If you wish to change the behavior of a feature, such as vim mode, you can create =~/.spacehammer/vim.fnl= to override the default implementation.
